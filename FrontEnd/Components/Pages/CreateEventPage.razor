@page "/create-event"
@using Contracts
@using FrontEnd.Infrastructure
@using System.Text.Json
@using FrontEnd.Infrastructure.Authentication
@using System.ComponentModel.DataAnnotations
@using Contracts.Endpoints.CreateEvent
@using FrontEnd.Infrastructure.UtilityMethods
@using System.Collections.ObjectModel
@using FrontEnd.AzureServices
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject CreateEventFormInputValidator Validator
@inject IEventsApiService EventsService
@inject IJSRuntime JsRuntime
@inject IAzureStorage AzureStorage

<AuthorizeComponent AuthService="@AuthService" NavigationManager="NavigationManager"></AuthorizeComponent>

<div class="bg-white w-full flex flex-col h-full max-h-fit">
    <EditForm EditContext="FormContext" class="w-full flex flex-col gap-2 mt-8">
        <ValidationGenericErrorsSummary EditContext="FormContext"/>

        <div class="w-1/4 mx-auto flex text-4xl font-semibold mb-4">
            <span class="mx-auto">Регистрирай ново събитие</span>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Име на събитието: <span class="text-red">*</span>
            </label>
            <InputText @bind-Value="FormInputModel.Name" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>

        <div class="flex w-1/4 mx-auto gap-2">
            <div class="flex flex-col w-1/2 h-full">
                <label class="font-semibold">
                    Област: <span class="text-red">*</span>
                </label>
                <select @onchange="@OnSelectedRegion" class="bg-white rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none">
                    @{
                        foreach (var region in RegionsService.Regions)
                        {
                            <option class="bg-white" value="@region.RegionName">@region.RegionName</option>
                        }
                    }
                </select>
            </div>

            <div class="flex flex-col w-1/2 h-full">
                <label class="font-semibold">
                    Град: <span class="text-red">*</span>
                </label>
                <select @onchange="@OnSelectedCity" class="bg-white rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none">
                    @{
                        foreach (var city in RegionsService.Regions.FirstOrDefault(x => x.RegionName == Region)!.Cities)
                        {
                            <option class="bg-white" value="@city">@city</option>
                        }
                    }
                </select>
            </div>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Адрес: <span class="text-red">*</span>
            </label>
            <InputText @bind-Value="FormInputModel.Address" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Начало: <span class="text-red">*</span>
            </label>
            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="FormInputModel.StartTime" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Информация относно събитието: <span class="text-red">*</span>
            </label>
            <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Description"></ValidationMessage>
            <InputTextArea @bind-Value="FormInputModel.Description" rows="3" class="resize-none rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>


        <button type="button" class="bg-secondary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center" @onclick="@OpenCategoriesModal">
            @{
                var categoriesCount = Categories.Count(x => x.IsSelected);
                string text = categoriesCount > 0 ? $"Избрани ({categoriesCount})" : "Избери категории";
            }
            <span>@text</span>
        </button>

        <button type="button" class="bg-secondary w-1/4 mx-auto rounded-lg text-white p-1 text-xl pb-2 text-center align-middle items-center" @onclick="@OnOpenPictureModal">
            <span>Избери снимка</span>
        </button>

        <button type="submit" @onclick="OnSubmit" class="bg-primary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-[#348aa7] transition-all">
            <span>@(isLoading ? "Изчакайте..." : "Регистрирай събитие")</span>
        </button>
    </EditForm>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private void OpenCategoriesModal() => this.Modal.Show<MultipleListModal>((nameof(MultipleListModal.Items), Categories)).Result.ContinueWith(_ => this.StateHasChanged());

    InputPictureModel profilePicture;

    async Task OnOpenPictureModal()
    {
        await this.Modal.Show<ImageUploadModal>().Result.ContinueWith(x => {
            if (x.Result is
                {
                    Confirmed: true,
                    Data: not null
                })
            {
                var modal = (InputPictureModel) x.Result.Data;
                this.profilePicture = modal;
            }
        });
    }

    private List<SelectableItem<string>> Categories = [];

    private CreateEventFormInputModel FormInputModel { get; set; } = new();
    private EditContext FormContext { get; set; } = null!;
    private ValidationMessageStore ValidationMessageStore { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        FormContext = new EditContext(FormInputModel);
        ValidationMessageStore = new ValidationMessageStore(FormContext);
        City = "София";
        Region = "София";
        var categories = await EventsService.GetCategories();
        Categories = categories.Content!.Categories.Select(x => new SelectableItem<string>(x)).ToList();
    }

    async Task OnSubmit()
    {
        isLoading = true;
        this.FormInputModel.City = City;
        this.FormInputModel.Region = Region;
        this.FormInputModel.Categories = Categories.Where(x => x.IsSelected).Select(x => x.Value).ToList();

        if (this.profilePicture is null || (string.IsNullOrWhiteSpace(this.profilePicture.Name) is false && this.profilePicture.Stream.Length > 0) is false)
        {
            isLoading = false;
            await this.JsRuntime.ToastError("Моля качете снимка!");
            return;
        }

        var isValid = await Validator.ValidateFormModelAsync(FormInputModel, FormContext, ValidationMessageStore);
        if (!isValid)
        {
            isLoading = false;
            return;
        }
        
        var blobDto = await AzureStorage.UploadAsync(this.profilePicture.Stream, this.profilePicture.Name);

        if (blobDto.Error)
        {
            await this.JsRuntime.ToastError("Възникна грешка при качването на профилната снимка!");
            return;
        }

        var response = await EventsService.CreateEvent(
            new CreateEventRequest
            {
                Name = this.FormInputModel.Name,
                Description = this.FormInputModel.Description,
                StartDate = this.FormInputModel.StartTime,
                Region = this.FormInputModel.Region,
                City = this.FormInputModel.City,
                Address = this.FormInputModel.Address,
                Categories = this.FormInputModel.Categories,
                PictureUrl = blobDto.Blob.Uri!,
            });

        if (response.IsSuccessStatusCode)
        {
            isLoading = false;
            await this.JsRuntime.ToastSuccess("Успешно създадено събитие!");
            NavigationManager.NavigateTo("/events");
        }
        else
        {
            var errorResponse = await response.Error.GetErrorResponse();
            errorResponse.ConstructValidationMessages<RegisterFormInputModel>(FormContext, ValidationMessageStore, requestMap);
            isLoading = false;
            await this.JsRuntime.ToastError("Възникна грешка при създаването на събитието!");
        }
    }

    void OnSelectedRegion(ChangeEventArgs e) => this.Region = e.Value.ToString();

    void OnSelectedCity(ChangeEventArgs e) => this.City = e.Value.ToString();

    static ReadOnlyDictionary<string, string> requestMap = new Dictionary<string, string>()
    {
        { nameof(FormInputModel.Name), nameof(CreateEventRequest.Name) },
        { nameof(FormInputModel.Description), nameof(CreateEventRequest.Description) },
        { nameof(FormInputModel.StartTime), nameof(CreateEventRequest.StartDate) },
        { nameof(FormInputModel.Region), nameof(CreateEventRequest.Region) },
        { nameof(FormInputModel.City), nameof(CreateEventRequest.City) },
        { nameof(FormInputModel.Address), nameof(CreateEventRequest.Address) },
        { nameof(FormInputModel.Categories), nameof(CreateEventRequest.Categories) }
    }.AsReadOnly();

    private bool isLoading;
    string City;
    string Region;
}