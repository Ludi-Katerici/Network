@inject IEventsApiService EventsApiService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IFriendsApiService FriendsApiService

@page "/details/{id:guid}"
@using Contracts
@using Contracts.Endpoints.GetEventDetails
@using Contracts.Endpoints.SendFriend
@using Contracts.Endpoints.SignUpForEvent
@using FrontEnd.Infrastructure.Authentication
@using FrontEnd.Infrastructure.UtilityMethods

<AuthorizeComponent AuthService="@AuthService" NavigationManager="NavigationManager"></AuthorizeComponent>

<section class="flex w-full h-full bg-[#B9C1C8]">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-4">
        @if (EventDetails != null)
        {
            <div class="grid grid-cols-1 lg:grid-cols-2 flex gap-8">
                <div class="slider-box w-full h-full max-lg:mx-auto mx-0">
                    <div class="swiper main-slide-carousel swiper-container relative mb-6 rounded-lg">
                        <img class="rounded-2xl border border-4 border-primary" src="@EventDetails.ImageUrl" alt="Summer Travel Bag image">
                    </div>
                </div>
                <div class="flex flex-col items-center bg-white rounded-lg">
                    <span class="text-3xl text-white px-10 rounded-lg py-1 mt-4 font-semibold bg-secondary">@EventDetails.Title</span>

                    <span class="text-black rounded-lg py-1 mt-2 font-semibold">Предназначено за хора с интереси: </span>
                    <span class="text-lg text-white px-5 mx-4 rounded-lg py-1 font-semibold bg-primary text-center">@string.Join(", ", EventDetails.Categories)</span>

                    <span class="text-sm text-white px-4 py-2 rounded-lg mt-4 font-semibold bg-secondary mx-2">
                        @EventDetails.Description
                    </span>

                    <div class="flex gap-2 mt-4">
                        <span class="text-sm text-white rounded-lg py-1 px-2 font-semibold bg-primary">@($"{this.EventDetails.Region}")</span>
                        <span class="text-sm text-white rounded-lg py-1 px-2 font-semibold bg-primary">@EventDetails.Address</span>
                    </div>

                    <span class="text-lg text-white px-10 rounded-lg py-1 font-semibold bg-primary text-white mt-2">Стартира в @(EventDetails.StartDate.ToString("g"))</span>

                    @if (disableSignUpButton)
                    {
                        <button disabled="disabled" type="button" class="text-lg text-white px-10 rounded-lg py-1 font-semibold bg-green-300 text-white mt-2">Вече си записан</button>
                    }
                    else if (EventDetails.StartDate < DateTime.Now)
                    {
                        <button disabled="disabled" type="button" class="text-lg text-white px-10 rounded-lg py-1 font-semibold bg-red-300 text-white mt-2">Събитието вече е стартирало</button>
                    }
                    else
                    {
                        <button type="button" class="text-lg text-white px-10 rounded-lg py-1 font-semibold bg-green-500 text-white mt-2" @onclick="OnSignUpClick">Запиши се</button>
                    }

                </div>
            </div>
            <div class="mt-8 flex gap-2 flex-col bg-white rounded-md h-fit p-4 text-white mb-4 w-fit mx-auto px-16">
                <span class="text-black text-center">Записани участници:</span>

                @foreach (var attendee in EventDetails.Attendees)
                {
                    @if (attendee.Id == this.UserId)
                    {
                        continue;
                    }

                    <div class="bg-secondary px-4 py-4 rounded-md w-fit flex flex-col gap-4">
                        <div class="flex gap-4">
                            <span>@attendee.FullName</span>
                            <span class="ml-auto">
                                <img class="cursor-pointer" src="images/add-friend.png" alt="Add Friend" @onclick="() => OnAddFriendClick(attendee.Id)"/>
                            </span>
                        </div>

                        <div class="flex w-full gap-2">
                            <span>Хобита:</span>
                            <span class="bg-primary rounded-md px-2">@attendee.Interests</span>
                        </div>
                        <div class="flex w-full gap-2">
                            <span>Търси:</span>
                            <span class="bg-primary rounded-md px-2">@attendee.Searchings</span>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>


@code {

    [Parameter]
    public Guid Id { get; set; }

    Guid UserId { get; set; }

    GetEventDetailsResponse? EventDetails;

    bool disableSignUpButton = false;

    async Task OnSignUpClick()
    {
        var response = await EventsApiService.SignUpForEvent(
            new SignUpForEventRequest
            {
                EventId = this.EventDetails!.Id,
            });

        if (response.IsSuccessStatusCode)
        {
            disableSignUpButton = true;
            await JsRuntime.ToastSuccess("Успешно се записахте за събитието.");
        }
        else
        {
            await JsRuntime.ToastError("Грешка при записване за събитието. Моля опитайте отново.");
        }
    }

    async Task OnAddFriendClick(Guid receiverId)
    {
        var response = await FriendsApiService.SendFriendRequestTo(
            new SendFriendRequest
            {
                ReceiverId = receiverId,
            });

        if (response.IsSuccessStatusCode)
        {
            await JsRuntime.ToastSuccess("Успешно изпратихте покана за приятелство.");
        }
        else
        {
            await JsRuntime.ToastError("Вече имате изпратена/получена покана за приятелство към този потребител.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await EventsApiService.GetEventDetails(Id);
        var authDetails = await this.AuthService.GetAuthStateDetails();
        this.UserId = Guid.Parse(authDetails!.UserId);

        if (response.IsSuccessStatusCode)
        {
            this.EventDetails = response.Content;

            if (this.EventDetails.Attendees.Any(x => x.Id == this.UserId))
            {
                disableSignUpButton = true;
            }
        }
        else
        {
            await JsRuntime.ToastError("Грешка при зареждане на събитието. Моля опитайте отново.");
            NavigationManager.NavigateTo("/");
        }
    }
}