@page "/received-friend-requests"
@using Contracts.Endpoints.GetAllFriendRequests
@using FrontEnd.Infrastructure.Authentication
@using FrontEnd.Infrastructure.UtilityMethods
@using Contracts
@using Contracts.Endpoints.AcceptFriendRequest
@using Contracts.Endpoints.DeleteFriendRequest
@inject IFriendsApiService FriendsApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAuthService AuthService

<AuthorizeComponent AuthService="@AuthService" NavigationManager="NavigationManager"></AuthorizeComponent>

<div class="flex w-full h-full flex-col gap-4 my-auto mx-auto items-center justify-center">
    @if (this.FriendRequests.Count == 0)
    {
        <div class="text-black mx-auto flex items-center justify-center text-4xl font-semibold">
            Нямате изпратени неприети покани.
        </div>
    }
    else
    {
        <div class="text-black mx-auto flex items-center justify-center text-4xl font-semibold">
            Получени, очакващи отговор
        </div>

        <div class="flex flex-col justify-center h-fit items-center mx-auto bg-secondary p-8 gap-4 rounded-3xl">

            @foreach (var friendRequest in this.FriendRequests)
            {
                <div class="bg-primary flex gap-4 text-white font-semibold px-4 rounded-2xl py-4 items-center justify-center">
                    <span>От: @friendRequest.SenderFullName</span>
                    <span>Получена на: @(friendRequest.CreatedAt.ToString("g"))</span>
                    <div class="flex gap-2">
                        <button class="bg-green-500 rounded-md px-2 py-1" @onclick='async () => await OnAcceptFriendRequest(friendRequest.SenderId)'>Приеми</button>
                        <button class="bg-red rounded-md px-2 py-1" @onclick='async () => await OnRemoveFriend(friendRequest.SenderId)'>Откажи</button>
                    </div>
                </div>
            }

        </div>
    }


</div>

@code {
    List<GetAllFriendsRequestsResponse.FriendRequestResponseModel> FriendRequests = [];

    protected override async Task OnInitializedAsync()
    {
        var userId = (await this.AuthService.GetAuthStateDetails())!.UserId;
        var response = await this.FriendsApiService.GetAllFriendsRequests();
        if (response.IsSuccessStatusCode)
        {
            this.FriendRequests = response.Content.FriendRequests.Where(x => x.AcceptedAt.HasValue is false && x.ReceiverId == Guid.Parse(userId)).ToList();
        }
        else
        {
            await this.JsRuntime.ToastError("Неуспешно зареждане на приятелства.");
            this.NavigationManager.NavigateTo("/friend-requests");
        }
    }

    async Task OnAcceptFriendRequest(Guid senderId)
    {
        var response = await this.FriendsApiService.AcceptAFriendRequest(
            new AcceptFriendRequest
            {
                SenderId = senderId
            });

        if (response.IsSuccessStatusCode)
        {
            await this.JsRuntime.ToastSuccess("Поканата е приета успешно.");
        }
        else
        {
            await this.JsRuntime.ToastError("Неуспешно приемане на поканата.");
        }

        this.NavigationManager.NavigateTo("/friend-requests");
    }
    
    async Task OnRemoveFriend(Guid senderId)
    {
        var userId = (await this.AuthService.GetAuthStateDetails())!.UserId;
        var response = await this.FriendsApiService.DeleteAFriendRequest(
            new DeleteFriendRequest
            {
                SenderId = senderId,
                ReceiverId = Guid.Parse(userId)
            });

        if (response.IsSuccessStatusCode)
        {
            await this.JsRuntime.ToastSuccess("Поканата е премахната успешно.");
        }
        else
        {
            await this.JsRuntime.ToastError("Неуспешно премахване на поканата.");
        }

        this.NavigationManager.NavigateTo("/friend-requests"); 
    }
}