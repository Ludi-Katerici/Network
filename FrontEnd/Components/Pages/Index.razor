@page "/"
@page "/index"
@page "/events"
@using Contracts
@using System.Text.Json
@using Contracts.Endpoints.GetAllEvents
@using FrontEnd.Infrastructure
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IEventsApiService EventsApiService

<div class="w-full h-full flex flex-col bg-[#B9C1C8] w-ful">
    <div class="flex gap-4 w-full justify-center items-center mt-4">
        <button @onclick="@OpenCategoriesModal" class="bg-primary font-semibold rounded-2xl px-2 py-1 text-white ">Избери категории</button>
        <button @onclick="@OpenRegions" class="bg-primary font-semibold rounded-2xl px-2 py-1 text-white ">Избери област</button>
        <button @onclick="@OpenSelectDatesModal" class="bg-primary font-semibold rounded-2xl px-2 py-1 text-white ">Избери Дати</button>
    </div>

    <div class="w-full gap-4 h-fit flex mt-6 mb-6">
        <div class="flex flex-col w-full h-full gap-4 mx-auto items-center align-middle">
            @foreach (var groupEvents in Events)
            {
                <div class="mx-auto flex w-full h-full gap-4">

                    @foreach (var eventModel in groupEvents
                                  .Where(x => {
                                      if (preferredCategories.Count == 0)
                                          return true;
                                      
                                      return x.Categories.Any(y => preferredCategories.Contains(y));
                                  })
                                  .Where(x => {
                                        if (preferredRegions.Count == 0)
                                            return true;
                                        
                                        return preferredRegions.Contains(x.Region);
                                  })
                                  .Where(x => x.StartDate.Date >= selectedDates.StartDate.Date && x.StartDate.Date <= selectedDates.EndDate.Date))
                    {
                        <Card Model="eventModel" NavigationManager="NavigationManager"/>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    List<string> preferredCategories = [];
    List<string> preferredRegions = [];

    SelectDateTimeModal.Dates selectedDates = new() {
        StartDate = DateTime.Now,
        EndDate = DateTime.Now
    };
    
    private void OpenSelectDatesModal() => this.Modal.Show<SelectDateTimeModal>(
        (nameof(SelectDateTimeModal.StartDate), MinDate),
        (nameof(SelectDateTimeModal.EndDate), MaxDate)
        ).Result.ContinueWith(x => {
        if (x.Result is
            {
                Confirmed: true,
                Data: not null
            })
        {
            var modal = (SelectDateTimeModal.Dates) x.Result.Data;
            
            selectedDates = modal;
        }
        
        this.StateHasChanged();
    });

    private void OpenCategoriesModal() => this.Modal.Show<MultipleListModal>((nameof(MultipleListModal.Items), Categories)).Result.ContinueWith(x => {
        if (x.Result is
            {
                Confirmed: true,
                Data: not null
            })
        {
            var modal = (List<string>) x.Result.Data;

            preferredCategories = modal.ToList();

            Console.WriteLine(JsonSerializer.Serialize(preferredCategories));
        }
        
        this.StateHasChanged();
    });

    private void OpenRegions() => this.Modal.Show<MultipleListModal>((nameof(MultipleListModal.Items), Regions)).Result.ContinueWith(x => {
        if (x.Result is
            {
                Confirmed: true,
                Data: not null
            })
        {
            var modal = (List<string>) x.Result.Data;

            preferredRegions = modal.ToList();

            Console.WriteLine(JsonSerializer.Serialize(preferredRegions));
        }
        this.StateHasChanged();
    });

    private List<SelectableItem<string>> Categories = [];
    private List<SelectableItem<string>> Regions = [];
    
    public DateTime MinDate { get; set; } = DateTime.Now;
    public DateTime MaxDate { get; set; } = DateTime.Now;
    

    public List<List<GetAllEventsResponseModel.EventModel>> Events { get; set; } = [[]];
    public List<List<GetAllEventsResponseModel.EventModel>> RealEvents { get; set; } = [[]];

    protected override async Task OnInitializedAsync()
    {
        var events = await EventsApiService.GetAllEvents();

        if (events.IsSuccessStatusCode)
        {
            foreach (var @event in events.Content.Events)
            {
                var lastList = Events.Last();

                if (lastList.Count == 5)
                {
                    Events.Add(new List<GetAllEventsResponseModel.EventModel>());
                    lastList = Events.Last();
                }

                lastList.Add(@event);
            }
            
            var flatted = Events.SelectMany(x => x).ToList();
            
            if (flatted.Count != 0)
            {
                MinDate = flatted.Min(x => x.StartDate);
                MaxDate = flatted.Max(x => x.StartDate);

                this.selectedDates = new SelectDateTimeModal.Dates
                {
                    StartDate = MinDate,
                    EndDate = MaxDate
                };
            }

            RealEvents = Events.ToList();
            var categories = await EventsApiService.GetCategories();
            Categories = categories.Content!.Categories.Select(x => new SelectableItem<string>(x)).ToList();
            Regions = RegionsService.Regions.Select(x => new SelectableItem<string>(x.RegionName)).ToList();
        }
        else
        {
            Console.WriteLine("Error fetching events");
        }
    }
}