@page "/people"
@using Contracts
@using System.Text.Json
@using Contracts.Endpoints.GetAllEvents
@using Contracts.Endpoints.GetPeople
@using FrontEnd.Infrastructure
@using FrontEnd.Infrastructure.Authentication
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IEventsApiService EventsApiService
@inject IAuthService AuthService

<AuthorizeComponent AuthService="@AuthService" NavigationManager="NavigationManager"></AuthorizeComponent>

<div class="w-full h-full flex flex-col bg-[#B9C1C8] w-ful">
    
    @if (this.People[0].Count != 0)
    {
        <div class="flex gap-4 w-full justify-center items-center mt-4">
            <button @onclick="@OpenCategoriesModal" class="bg-primary font-semibold rounded-2xl px-2 py-1 text-white ">Избери категории</button>
            <button @onclick="@OpenRegions" class="bg-primary font-semibold rounded-2xl px-2 py-1 text-white ">Избери област</button>
        </div>
    }
    

    <div class="w-full gap-4 h-fit flex mt-6 mb-6">
        <div class="flex flex-col w-full h-full gap-4 mx-auto items-center align-middle">

            @if (this.People[0].Count == 0)
            {
                <span class="text-black font-semibold text-4xl">Няма акаунти...</span>
            }
            else
            {
                @foreach (var person in People)
                {
                    <div class="mx-auto flex w-full h-full gap-4">

                        @foreach (var eventModel in person
                                      .Where(x => {
                                          if (preferredCategories.Count == 0)
                                              return true;

                                          return x.Interests.Any(y => preferredCategories.Contains(y)) || x.Searchings.Any(y => preferredCategories.Contains(y));
                                      })
                                      .Where(x => {
                                          if (preferredRegions.Count == 0)
                                              return true;

                                          return preferredRegions.Contains(x.Region);
                                      }))
                        {
                            <PersonCard Model="eventModel" NavigationManager="NavigationManager"/>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    List<string> preferredCategories = [];
    List<string> preferredRegions = [];

    private void OpenCategoriesModal() => this.Modal.Show<MultipleListModal>((nameof(MultipleListModal.Items), Categories)).Result.ContinueWith(x => {
        if (x.Result is
            {
                Confirmed: true,
                Data: not null
            })
        {
            var modal = (List<string>) x.Result.Data;

            preferredCategories = modal.ToList();

            Console.WriteLine(JsonSerializer.Serialize(preferredCategories));
        }

        this.StateHasChanged();
    });

    private void OpenRegions() => this.Modal.Show<MultipleListModal>((nameof(MultipleListModal.Items), Regions)).Result.ContinueWith(x => {
        if (x.Result is
            {
                Confirmed: true,
                Data: not null
            })
        {
            var modal = (List<string>) x.Result.Data;

            preferredRegions = modal.ToList();

            Console.WriteLine(JsonSerializer.Serialize(preferredRegions));
        }
        this.StateHasChanged();
    });

    private List<SelectableItem<string>> Categories = [];
    private List<SelectableItem<string>> Regions = [];


    public List<List<GetPeopleResponse.Person>> People { get; set; } = [[]];

    protected override async Task OnInitializedAsync()
    {
        var events = await EventsApiService.GetAllPeople();

        if (events.IsSuccessStatusCode)
        {
            foreach (var @event in events.Content.People)
            {
                var lastList = People.Last();

                if (lastList.Count == 5)
                {
                    People.Add(new List<GetPeopleResponse.Person>());
                    lastList = People.Last();
                }

                lastList.Add(@event);
            }

            var categories = await EventsApiService.GetCategories();
            Categories = categories.Content!.Categories.Select(x => new SelectableItem<string>(x)).ToList();
            Regions = RegionsService.Regions.Select(x => new SelectableItem<string>(x)).ToList();
        }
        else
        {
            Console.WriteLine("Error fetching events");
        }
    }
}