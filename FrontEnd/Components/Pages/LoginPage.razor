@page "/Login"
@using Contracts
@using Contracts.Endpoints.LoginUser    
@using FrontEnd.Infrastructure.Authentication
@using FrontEnd.Infrastructure.UtilityMethods

@inject LoginFormInputModelValidator Validator 
@inject IJSRuntime JsRuntime
@inject IIdentityApiService IdentityApiService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager


<div class="bg-white w-full flex flex-col h-full">
    <EditForm Model="FormInputModel" class="w-full flex flex-col gap-2 mt-16" OnSubmit="OnFormSubmit">
        <div class="w-1/4 mx-auto flex text-4xl font-semibold mb-4">
            <span class="mx-auto">Регистрирай се</span>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Email: <span class="text-red">*</span>
            </label>
            <InputText @bind-Value="FormInputModel.Email" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>

        <div class="flex flex-col w-1/4 mx-auto">
            <label class="font-semibold">
                Парола: <span class="text-red">*</span>
            </label>
            <InputText @bind-Value="FormInputModel.Password" type="password" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
        </div>

        <button type="submit" class="bg-primary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-[#348aa7] transition-all">
            <span>@(isLoading ? "Изчакайте..." : "Влез")</span>
        </button>
    </EditForm>
</div>

@code {
    public LoginFormInputModel FormInputModel { get; set; } = new();

    bool isLoading = false;

    async Task OnFormSubmit()
    {
        isLoading = true;
        var validationResult = await Validator.ValidateAsync(FormInputModel);

        if (validationResult.IsValid is false)
        {
            await JsRuntime.ToastError("Грешен email или парола!");
            return;
        }

        var result = await IdentityApiService.LoginUser(
            new LoginUserRequest
            {
                Email = FormInputModel.Email,
                Password = FormInputModel.Password
            });
        
        isLoading = false;
        
        if (result is
            {
                IsSuccessStatusCode: true,
                Content: not null
            })
        {
            await JsRuntime.ToastSuccess("Успешно влизане!");
            await SetAuthDetails(result.Content);
            this.NavigationManager.NavigateTo("/");
        }
        else
        {
            await JsRuntime.ToastError("Грешен email или парола!");
        }
    }
    
    private async Task SetAuthDetails(LoginUserResponse loginResponse)
    {
        if (loginResponse.UserId == default)
        {
            throw new InvalidOperationException("Invalid login response");
        }

        await this.AuthService.SetAuthStateDetails(
            new AuthStateDetails
            {
                Claims = loginResponse.Claims,
                Roles = loginResponse.Roles,
                Permissions = loginResponse.Permissions,
                UserId = loginResponse.UserId.ToString(),
            });
    }
}