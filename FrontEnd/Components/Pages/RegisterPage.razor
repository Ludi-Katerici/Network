@page "/Register"
@using FrontEnd.Infrastructure.UtilityMethods
@using Contracts
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using FluentValidation
@inject IJSRuntime JsRuntime
@inject RegisterFormInputModelValidator Validator

<div class="bg-white w-full flex flex-col h-full">
    <EditForm EditContext="FormContext" class="w-full flex flex-col gap-2 mt-16">
        <ValidationGenericErrorsSummary EditContext="FormContext"/>

        @if (Step == 1)
        {
            <div class="w-1/4 mx-auto flex text-4xl font-semibold mb-4">
                <span class="mx-auto">Регистрирай се</span>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Име: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Name"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Name"
                           class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Фамилия: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Family"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Family" id="Family" name="Family" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Email: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Email"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Email" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Телефонен Номер: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.PhoneNumber"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.PhoneNumber" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Парола: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Password"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Password" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Повтори парола: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.ConfirmPassword"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.ConfirmPassword" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <button type="button" @onclick="GoToNextStep" class="bg-primary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-[#348aa7] transition-all">
                <span>Следваща стъпка</span>
            </button>
        }
        else if (Step == 2)
        {
            <div class="flex w-1/4 mx-auto gap-2">
                <div class="flex flex-col w-1/2 h-full">
                    <label class="font-semibold">
                        Област: <span class="text-red">*</span>
                    </label>
                    <select @onchange="@OnSelectedRegion" class="bg-white rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none">
                        @{
                            foreach (var region in RegionsList)
                            {
                                <option class="bg-white" value="@region.RegionName">@region.RegionName</option>
                            }
                        }
                    </select>
                </div>

                <div class="flex flex-col w-1/2 h-full">
                    <label class="font-semibold">
                        Град: <span class="text-red">*</span>
                    </label>
                    <select @onchange="@OnSelectedCity"  class="bg-white rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none">
                        @{
                            foreach (var city in RegionsList.FirstOrDefault(x => x.RegionName == Region)!.Cities)
                            {
                                <option class="bg-white" value="@city">@city</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Образование: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Education"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Education" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Работа: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Work"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Work" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Професионален Опит: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.ProfessionalExperience"></ValidationMessage>
                <InputTextArea @bind-Value="FormInputModel.ProfessionalExperience" rows="2"  id="Family" name="Family" class="resize-none rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Интереси/Хобита/Умения: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Interests"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Interests" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    В търсене на: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Searchings"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Searchings" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Допълнителна информация: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.AdditionalInformation"></ValidationMessage>
                <InputTextArea @bind-Value="FormInputModel.AdditionalInformation" rows="2" class="resize-none rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <button type="button" @onclick="OnSubmit" class="bg-green-700 w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-green-600 transition-all">
                <span>@(this.loading ? "Изчакайте..." : "Приключи регистрация")</span>
            </button>
        }

    </EditForm>
</div>


@code {
    private RegisterFormInputModel FormInputModel { get; set; } = new();
    private EditContext FormContext { get; set; } = null!;
    private ValidationMessageStore ValidationMessageStore { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        FormContext = new EditContext(FormInputModel);
        ValidationMessageStore = new ValidationMessageStore(FormContext);
        Step = 1;
        City = "София";
        Region = "София";
        this.RegionsList = RegionsService.Regions;
    }
    
    void OnSelectedRegion(ChangeEventArgs e) => this.Region = e.Value.ToString();

    void OnSelectedCity(ChangeEventArgs e) => this.City = e.Value.ToString();

    async Task GoToNextStep()
    {
        await Validator.ValidateFormModelAsync(FormInputModel, FormContext, ValidationMessageStore);
        var nameValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Name)));
        var familyValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Family)));
        var emailValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Email)));
        var phoneNumberValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.PhoneNumber)));
        var passwordValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Password)));
        var confirmPasswordValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.ConfirmPassword)));
        
        if ((!nameValidationMessages.Any() &&
            !familyValidationMessages.Any() &&
            !emailValidationMessages.Any() &&
            !phoneNumberValidationMessages.Any() &&
            !passwordValidationMessages.Any() &&
            !confirmPasswordValidationMessages.Any()) is false)
        {
            return;
        }
        
        

        Step++;
        ValidationMessageStore.Clear();
        FormContext.Validate();
        FormContext.NotifyValidationStateChanged();
    }

    async Task OnSubmit()
    {
        this.loading = true;
        Console.WriteLine("Submitting form...");
        var isValid = await Validator.ValidateFormModelAsync(FormInputModel, FormContext, ValidationMessageStore);

        if (isValid is false)
        {
            Console.WriteLine($"Form is not valid! {this.FormContext.GetValidationMessages().Count()}");
            foreach (var message in this.FormContext.GetValidationMessages())
            {
                Console.WriteLine(message);
            }
            this.loading = false;
            return;
        }

        await Task.Delay(1000);

        Console.WriteLine(JsonSerializer.Serialize(this.FormInputModel));
        Console.WriteLine(City);
        Console.WriteLine(Region);
        this.loading = false;
        await this.JsRuntime.ToastSuccess("Успешно се регистрирахте!");
    }

    int Step;
    bool loading;
    string City;
    string Region;
    List<Region> RegionsList;
}