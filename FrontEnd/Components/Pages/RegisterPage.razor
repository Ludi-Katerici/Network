@page "/Register"
@using FrontEnd.Infrastructure.UtilityMethods
@using Contracts
@using Contracts.Endpoints.RegisterUser
@using System.Collections.ObjectModel
@using System.Text.Json
@using FrontEnd.AzureServices
@using FrontEnd.Infrastructure
@inject IJSRuntime JsRuntime
@inject RegisterFormInputModelValidator Validator
@inject IIdentityApiService IdentityApiService
@inject NavigationManager NavigationManager
@inject IAzureStorage AzureStorage

<div class="bg-white w-full flex flex-col h-full">
    <EditForm EditContext="FormContext" class="w-full flex flex-col gap-2 mt-16">
        <ValidationGenericErrorsSummary EditContext="FormContext"/>

        @if (Step == 1)
        {
            <div class="w-1/4 mx-auto flex text-4xl font-semibold mb-4">
                <span class="mx-auto">Регистрирай се</span>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Име: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Name"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Name"
                           class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Фамилия: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Family"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Family" id="Family" name="Family" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Email: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Email"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Email" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Телефонен Номер: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.PhoneNumber"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.PhoneNumber" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Парола: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Password"></ValidationMessage>
                <InputText type="password" @bind-Value="FormInputModel.Password" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Повтори парола: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.ConfirmPassword"></ValidationMessage>
                <InputText type="password" @bind-Value="FormInputModel.ConfirmPassword" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <button type="button" @onclick="OnOpenProfilePictureModal" class="bg-secondary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-slate-500 transition-all">
                <span>Качи профилна снимка</span>
            </button>

            <button type="button" @onclick="GoToNextStep" class="bg-primary w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-[#348aa7] transition-all">
                <span>Следваща стъпка</span>
            </button>
        }
        else if (Step == 2)
        {
            <div class="flex w-1/4 mx-auto gap-2">
                <div class="flex flex-col w-1/2 h-full">
                    <label class="font-semibold">
                        Област: <span class="text-red">*</span>
                    </label>
                    <select @onchange="@OnSelectedRegion" class="bg-white rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none">
                        @{
                            foreach (var region in RegionsService.Regions)
                            {
                                <option class="bg-white" value="@region">@region</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Образование: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Education"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Education" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Работа: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Work"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.Work" class="rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Професионален Опит: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.ProfessionalExperience"></ValidationMessage>
                <InputText @bind-Value="FormInputModel.ProfessionalExperience" rows="2" id="Family" name="Family" class="resize-none rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Интереси/Хобита/Умения: <span class="text-red">*</span>
                </label>
                @{
                    var invalidInterests = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(this.FormInputModel.Interests))).Any() ? "invalid" : "";
                }
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Interests"></ValidationMessage>
                <input @oninput="@OnChangeInterests" @bind="@interests" class="@invalidInterests rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    В търсене на: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.Searchings"></ValidationMessage>
                @{
                    var invalidSearchings = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(this.FormInputModel.Searchings))).Any() ? "invalid" : "";
                }
                <input @oninput="@OnChangeSearchings" @bind="@searchings" class="@invalidSearchings rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <div class="flex flex-col w-1/4 mx-auto">
                <label class="font-semibold">
                    Допълнителна информация: <span class="text-red">*</span>
                </label>
                <ValidationMessage class="text-sm validation-message" For="() => FormInputModel.AdditionalInformation"></ValidationMessage>
                <InputTextArea @bind-Value="FormInputModel.AdditionalInformation" rows="2" class="resize-none rounded-md px-3 py-1 text-t-color border border-slate-300 focus:border-blue-500 focus:border focus:outline-none"/>
            </div>

            <button type="button" @onclick="OnSubmit" class="bg-green-700 w-1/4 mx-auto rounded-lg text-white p-1 text-xl mt-8 pb-2 text-center align-middle items-center hover:bg-green-600 transition-all">
                <span>@(this.loading ? "Изчакайте..." : "Приключи регистрация")</span>
            </button>
        }

    </EditForm>
</div>


@code {
    private RegisterFormInputModel FormInputModel { get; set; } = new();
    private EditContext FormContext { get; set; } = null!;
    private ValidationMessageStore ValidationMessageStore { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        FormContext = new EditContext(FormInputModel);
        ValidationMessageStore = new ValidationMessageStore(FormContext);
        Step = 1;
        Region = "София";
    }

    void OnSelectedRegion(ChangeEventArgs e) => this.Region = e.Value.ToString();

    void OnChangeInterests(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        var lastChar = value.ElementAtOrDefault(value.Length - 1);
        var secondLastChar = value.ElementAtOrDefault(value.Length - 2);

        if (secondLastChar != ',' && lastChar == ' ')
        {
            this.interests = value.TrimEnd() + ",";
        }
        else
        {
            this.interests = value;
        }

        this.FormInputModel.Interests = this.interests;
    }
    void OnChangeSearchings(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        var lastChar = value.ElementAtOrDefault(value.Length - 1);
        var secondLastChar = value.ElementAtOrDefault(value.Length - 2);

        if (secondLastChar != ',' && lastChar == ' ')
        {
            this.searchings = value.TrimEnd() + ",";
        }
        else
        {
            this.searchings = value;
        }

        this.FormInputModel.Searchings = this.searchings;
    }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    InputPictureModel profilePicture;

    async Task OnOpenProfilePictureModal()
    {
        await this.Modal.Show<ImageUploadModal>().Result.ContinueWith(x => {
            if (x.Result is
                {
                    Confirmed: true,
                    Data: not null
                })
            {
                var modal = (InputPictureModel) x.Result.Data;
                this.profilePicture = modal;
            }
        });
    }


    async Task GoToNextStep()
    {
        await Validator.ValidateFormModelAsync(FormInputModel, FormContext, ValidationMessageStore);
        var nameValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Name)));
        var familyValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Family)));
        var emailValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Email)));
        var phoneNumberValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.PhoneNumber)));
        var passwordValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.Password)));
        var confirmPasswordValidationMessages = this.FormContext.GetValidationMessages(this.FormContext.Field(nameof(FormInputModel.ConfirmPassword)));

        
        if (this.profilePicture is null || (string.IsNullOrWhiteSpace(this.profilePicture.Name) is false && this.profilePicture.Stream.Length > 0) is false)
        {
            await this.JsRuntime.ToastError("Моля качете профилна снимка!");
            return;
        }
        
        if ((!nameValidationMessages.Any() &&
             !familyValidationMessages.Any() &&
             !emailValidationMessages.Any() &&
             !phoneNumberValidationMessages.Any() &&
             !passwordValidationMessages.Any() &&
             !confirmPasswordValidationMessages.Any()) is false)
        {
            return;
        }

        Step++;
        ValidationMessageStore.Clear();
        FormContext.Validate();
        FormContext.NotifyValidationStateChanged();
    }

    async Task OnSubmit()
    {
        this.loading = true;
        var isValid = await Validator.ValidateFormModelAsync(FormInputModel, FormContext, ValidationMessageStore);

        if (isValid is false)
        {
            this.loading = false;
            return;
        }

        await Task.Delay(1000);

        await CreateUser();
        this.loading = false;
    }

    async Task CreateUser()
    {
        var blobDto = await AzureStorage.UploadAsync(this.profilePicture.Stream, this.profilePicture.Name);

        if (blobDto.Error)
        {
            await this.JsRuntime.ToastError("Възникна грешка при качването на профилната снимка!");
            return;
        }
        
        var user = new RegisterUserRequest
        {
            Name = FormInputModel.Name,
            ProfilePictureUrl = blobDto.Blob.Uri!,
            Family = FormInputModel.Family,
            Email = FormInputModel.Email,
            PhoneNumber = FormInputModel.PhoneNumber,
            Password = FormInputModel.Password,
            Region = Region,
            Education = FormInputModel.Education,
            Work = FormInputModel.Work,
            ProfessionalExperience = FormInputModel.ProfessionalExperience,
            Interests = FormInputModel.Interests,
            Searchings = FormInputModel.Searchings,
            AdditionalInformation = FormInputModel.AdditionalInformation
        };

        var response = await IdentityApiService.RegisterUser(user);
        if (response.IsSuccessStatusCode)
        {
            await this.JsRuntime.ToastSuccess("Успешно се регистрирахте! Моля влезте в профила си.");
            NavigationManager.NavigateTo("/Login");
            return;
        }

        var errorResponse = await response.Error.GetErrorResponse();
        Console.WriteLine(JsonSerializer.Serialize(errorResponse));
        errorResponse.ConstructValidationMessages<RegisterFormInputModel>(FormContext, ValidationMessageStore, requestMap);
        this.Step--;
        await this.JsRuntime.ToastError("Възникна грешка при регистрацията!");
    }

    static ReadOnlyDictionary<string, string> requestMap = new Dictionary<string, string>()
    {
        { nameof(FormInputModel.Name), nameof(RegisterUserRequest.Name) },
        { nameof(FormInputModel.Family), nameof(RegisterUserRequest.Family) },
        { nameof(FormInputModel.Email), nameof(RegisterUserRequest.Email) },
        { nameof(FormInputModel.PhoneNumber), nameof(RegisterUserRequest.PhoneNumber) },
        { nameof(FormInputModel.Password), nameof(RegisterUserRequest.Password) },
        { nameof(FormInputModel.Education), nameof(RegisterUserRequest.Education) },
        { nameof(FormInputModel.Work), nameof(RegisterUserRequest.Work) },
        { nameof(FormInputModel.ProfessionalExperience), nameof(RegisterUserRequest.ProfessionalExperience) },
        { nameof(FormInputModel.Interests), nameof(RegisterUserRequest.Interests) },
        { nameof(FormInputModel.Searchings), nameof(RegisterUserRequest.Searchings) },
        { nameof(FormInputModel.AdditionalInformation), nameof(RegisterUserRequest.AdditionalInformation) },
        { nameof(Region), nameof(RegisterUserRequest.Region) },
    }.AsReadOnly();

    int Step;
    bool loading;
    string Region;
    private string interests;
    private string searchings;
}