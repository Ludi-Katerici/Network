@using FrontEnd.Infrastructure.Authentication
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="flex items-center justify-center gap-6">
    <div class="cursor-pointer flex gap-3">
        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/")'>
            <img class="h-6" src="./icons/home.png" alt="Dots"/>
        </div>

        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/people")'>
            <img class="h-6" src="./icons/globe.png" alt="Dots"/>
        </div>

        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/create-event")'>
            <img class="h-6" src="./icons/plus.png" alt="Dots"/>
        </div>

        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/chat")'>
            <img class="h-6" src="./icons/chat.png" alt="Dots"/>
        </div>

        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/friend-requests")'>
            <img class="h-6" src="./icons/friends.png" alt="Dots"/>
        </div>

        @if (isAuthenticated)
        {
            <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo($"/details-person/{this.userId}")'>
                <img class="h-6" src="./icons/user.png" alt="Dots"/>
            </div>
        }

        <div class="justify-center bg-primary rounded-full items-center p-4" @onclick='() => NavigationManager.NavigateTo("/Login")'>
            <img class="h-6" src="./icons/logout.png" alt="Dots"/>
        </div>
    </div>
</div>

@code {
    bool isAuthenticated = false;
    Guid userId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        this.isAuthenticated = await AuthService.IsAuthenticated();
        var authDetails = await AuthService.GetAuthStateDetails();
        this.userId = Guid.Parse(authDetails.UserId);
    }
}